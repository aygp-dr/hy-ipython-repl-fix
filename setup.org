#+TITLE: Hy IPython REPL Fix
#+AUTHOR: Your Name
#+DATE: April 1, 2025
#+PROPERTY: header-args :mkdirp yes

* Introduction

This file contains the setup for a repository to isolate and fix the Hy REPL issue when running in IPython, as described in GitHub issue [[https://github.com/hylang/hy/issues/2646][#2646]].

The issue is:
: AttributeError: module 'builtins' has no attribute 'quit'

This happens because IPython removes the `quit` and `exit` functions from the builtins module, which Hy REPL depends on.

* Project Structure

Let's set up the basic project structure:

** README.md

#+begin_src text :tangle README.md
# Hy IPython REPL Fix

This repository isolates and fixes issue [#2646](https://github.com/hylang/hy/issues/2646) in the Hy language.

## Issue Description

The Hy REPL fails when launched from IPython with the error:

```
AttributeError: module 'builtins' has no attribute 'quit'
```

This occurs because IPython removes the `quit` and `exit` functions from the builtins module, which the Hy REPL depends on.

## Reproduction

1. Create and activate a virtual environment
2. Install dependencies: `pip install -r requirements.txt`
3. Run standard Python test: `python scripts/python_repl_test.py` (works)
4. Run IPython test: `python scripts/ipython_repl_test.py` (fails without fix)

## Original Issue Report

```
I have some use cases where we would like to launch the hy repl from inside of IPython

import hy
hy.REPL(locals = locals()).run()

works inside of python

% python
Python 3.12.9 (main, Feb  4 2025, 14:38:38) [Clang 16.0.0 (clang-1600.0.26.6)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import hy
>>> hy.REPL(locals = locals()).run()
Hy 1.0.0 (Afternoon Review) using CPython(main) 3.12.9 on Darwin
=> (print "hello world")
hello world
=> ^D
now exiting REPL...
0
>>> ^D

fails in ipython

% ipython
Python 3.12.9 (main, Feb  4 2025, 14:38:38) [Clang 16.0.0 (clang-1600.0.26.6)]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.31.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import hy
   ...: hy.REPL(locals = locals()).run()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
Cell In[1], line 2
      1 import hy
----> 2 hy.REPL(locals = locals()).run()

File ~/py.env/lib/python3.12/site-packages/hy/repl.py:408, in REPL.run(self)
    402 "Start running the REPL. Return 0 when done."
    404 sentinel = []
    405 saved_values = (
    406     getattr(sys, "ps1", sentinel),
    407     getattr(sys, "ps2", sentinel),
--> 408     builtins.quit,
    409     builtins.exit,
    410     builtins.help,
    411 )
    412 try:
    413     sys.ps1 = self.ps1

AttributeError: module 'builtins' has no attribute 'quit'
```
#+end_src

** pyproject.toml

#+begin_src toml :tangle pyproject.toml
[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hy-ipython-repl-fix"
version = "0.1.0"
description = "Fix for issue #2646 in Hy - REPL fails in IPython"
requires-python = ">=3.8"
readme = "README.md"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
]
dependencies = [
    "ipython>=8.0.0",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/hy-ipython-repl-fix"
"Bug Tracker" = "https://github.com/yourusername/hy-ipython-repl-fix/issues"

[tool.pytest]
testpaths = ["tests"]
python_files = "test_*.py"
#+end_src

** requirements.txt

#+begin_src text :tangle requirements.txt
ipython>=8.0.0
git+https://github.com/hylang/hy.git@master
pytest>=7.0.0
#+end_src

* Test Scripts

Create scripts to demonstrate the issue:

** Standard Python REPL Test

#+begin_src python :tangle scripts/python_repl_test.py
#!/usr/bin/env python3
"""
Test running the Hy REPL from a standard Python interpreter.
This should work correctly.
"""
import sys
import hy

print(f"Python version: {sys.version}")
print("Starting Hy REPL from standard Python...")
print("Press Ctrl+D to exit the REPL")
print("-" * 50)

# This should work without errors
hy.REPL(locals=locals()).run()

print("-" * 50)
print("REPL exited successfully")
#+end_src

** IPython REPL Test

#+begin_src python :tangle scripts/ipython_repl_test.py
#!/usr/bin/env python3
"""
Test running the Hy REPL from IPython.
This will fail with: AttributeError: module 'builtins' has no attribute 'quit'
Without the fix applied.
"""
import sys
import subprocess
import tempfile
import os

# Create a temporary script to run with IPython
with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
    f.write("""
import sys
import hy

print(f"Python version: {sys.version}")
print("Starting Hy REPL from IPython...")
print("Press Ctrl+D to exit the REPL")
print("-" * 50)

# This will fail without the fix
try:
    hy.REPL(locals=locals()).run()
    print("-" * 50)
    print("REPL exited successfully")
except AttributeError as e:
    print("-" * 50)
    print(f"REPL failed with error: {e}")
    print("The fix needs to be applied to make this work")
""")
    script_path = f.name

# Run the script with IPython
try:
    subprocess.run(["ipython", script_path], check=True)
except subprocess.CalledProcessError:
    print("Failed to run IPython script")

# Clean up
os.unlink(script_path)
#+end_src

* The Fix

Now, let's create a script that demonstrates the fix for this issue:

** Patched REPL Implementation

#+begin_src python :tangle scripts/fix_patch.py
#!/usr/bin/env python3
"""
This script demonstrates a fix for issue #2646 in Hy.
It creates a patched version of the REPL class that handles missing
quit/exit functions in the builtins module.
"""
import sys
import builtins
import types

# First, let's check if we're running in IPython
def is_ipython():
    try:
        return __IPYTHON__ is not None
    except NameError:
        return False

def patch_hy_repl():
    """
    Patch the Hy REPL to handle missing quit/exit functions in builtins.
    """
    import hy
    from hy.repl import REPL
    
    # Store the original run method
    original_run = REPL.run
    
    # Create a dummy quit function if needed
    dummy_quit = types.FunctionType(
        lambda: None.__code__,
        {}, 
        "<dummy-quit>",
        (), 
        None
    )
    
    # Create patched run method
    def patched_run(self):
        """Patched version of REPL.run() that handles missing builtins.quit"""
        sentinel = []
        saved_values = (
            getattr(sys, "ps1", sentinel),
            getattr(sys, "ps2", sentinel),
            getattr(builtins, "quit", dummy_quit),
            getattr(builtins, "exit", dummy_quit),
            getattr(builtins, "help", sentinel),
        )
        
        # Rest of the method remains unchanged
        try:
            sys.ps1 = self.ps1
            sys.ps2 = self.ps2
            
            # These will be used by the REPL instance
            builtins.quit = self._quit
            builtins.exit = self._quit
            builtins.help = self._help
            
            self._repl()
            return 0
        finally:
            prev_ps1, prev_ps2, prev_quit, prev_exit, prev_help = saved_values
            
            if prev_ps1 is sentinel:
                del sys.ps1
            else:
                sys.ps1 = prev_ps1
                
            if prev_ps2 is sentinel:
                del sys.ps2
            else:
                sys.ps2 = prev_ps2
                
            if prev_quit is dummy_quit:
                if hasattr(builtins, "quit"):
                    delattr(builtins, "quit")
            else:
                builtins.quit = prev_quit
                
            if prev_exit is dummy_quit:
                if hasattr(builtins, "exit"):
                    delattr(builtins, "exit")
            else:
                builtins.exit = prev_exit
                
            if prev_help is sentinel:
                delattr(builtins, "help")
            else:
                builtins.help = prev_help
    
    # Apply the patch
    REPL.run = patched_run
    
    return "Hy REPL patched successfully"

if __name__ == "__main__":
    print(f"Running in IPython: {is_ipython()}")
    result = patch_hy_repl()
    print(result)
    
    # Now test the patched REPL
    import hy
    print("Starting patched Hy REPL...")
    print("Press Ctrl+D to exit the REPL")
    print("-" * 50)
    
    # This should now work in both Python and IPython
    try:
        hy.REPL(locals=locals()).run()
        print("-" * 50)
        print("REPL exited successfully with the fix")
    except Exception as e:
        print("-" * 50)
        print(f"REPL failed with error: {e}")
#+end_src

** Fixed IPython REPL Test

#+begin_src python :tangle scripts/fixed_ipython_repl_test.py
#!/usr/bin/env python3
"""
Test running the Hy REPL from IPython with the fix applied.
This should work correctly.
"""
import sys
import subprocess
import tempfile
import os

# Create a temporary script to run with IPython
with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
    f.write("""
import sys
import builtins
import types

# Create dummy quit function
dummy_quit = types.FunctionType(
    lambda: None.__code__,
    {}, 
    "<dummy-quit>",
    (), 
    None
)

# Apply the fix
def patch_hy_repl():
    import hy
    from hy.repl import REPL
    
    # Create patched run method
    def patched_run(self):
        sentinel = []
        saved_values = (
            getattr(sys, "ps1", sentinel),
            getattr(sys, "ps2", sentinel),
            getattr(builtins, "quit", dummy_quit),
            getattr(builtins, "exit", dummy_quit),
            getattr(builtins, "help", sentinel),
        )
        
        try:
            sys.ps1 = self.ps1
            sys.ps2 = self.ps2
            
            builtins.quit = self._quit
            builtins.exit = self._quit
            builtins.help = self._help
            
            self._repl()
            return 0
        finally:
            prev_ps1, prev_ps2, prev_quit, prev_exit, prev_help = saved_values
            
            if prev_ps1 is sentinel:
                del sys.ps1
            else:
                sys.ps1 = prev_ps1
                
            if prev_ps2 is sentinel:
                del sys.ps2
            else:
                sys.ps2 = prev_ps2
                
            if prev_quit is dummy_quit:
                if hasattr(builtins, "quit"):
                    delattr(builtins, "quit")
            else:
                builtins.quit = prev_quit
                
            if prev_exit is dummy_quit:
                if hasattr(builtins, "exit"):
                    delattr(builtins, "exit")
            else:
                builtins.exit = prev_exit
                
            if prev_help is sentinel:
                delattr(builtins, "help")
            else:
                builtins.help = prev_help
    
    # Apply the patch
    REPL.run = patched_run
    return "Hy REPL patched successfully"

print(f"Python version: {sys.version}")
print("Starting patched Hy REPL from IPython...")
print("Press Ctrl+D to exit the REPL")
print("-" * 50)

# Apply the patch and run the REPL
patch_hy_repl()
import hy
hy.REPL(locals=locals()).run()

print("-" * 50)
print("REPL exited successfully with the fix")
""")
    script_path = f.name

# Run the script with IPython
try:
    subprocess.run(["ipython", script_path], check=True)
except subprocess.CalledProcessError:
    print("Failed to run IPython script")

# Clean up
os.unlink(script_path)
#+end_src

* Tests

Let's create a proper test file for the issue and fix:

#+begin_src python :tangle tests/test_repl.py
#!/usr/bin/env python3
"""
Tests for the Hy REPL IPython fix.
"""
import sys
import pytest
import subprocess
import tempfile
import os
import types
import builtins

def test_python_repl():
    """Test that Hy REPL works in standard Python."""
    script = """
import hy
try:
    # This should not raise an exception
    repl = hy.REPL(locals=locals())
    # We don't actually run it, just check that it initializes
    print("SUCCESS")
except Exception as e:
    print(f"FAILURE: {e}")
"""
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
        f.write(script)
        script_path = f.name
    
    result = subprocess.run(
        [sys.executable, script_path], 
        capture_output=True, 
        text=True
    )
    
    os.unlink(script_path)
    assert "SUCCESS" in result.stdout
    assert "FAILURE" not in result.stdout

def test_ipython_repl_fails():
    """Test that unpatched Hy REPL fails in IPython."""
    # Skip if IPython is not installed
    pytest.importorskip("IPython")
    
    script = """
import sys
import builtins

# Simulate IPython by removing quit/exit
if hasattr(builtins, "quit"):
    delattr(builtins, "quit")
if hasattr(builtins, "exit"):
    delattr(builtins, "exit")

import hy
try:
    # This should raise an AttributeError
    repl = hy.REPL(locals=locals())
    repl.run()
    print("UNEXPECTED SUCCESS")
except AttributeError as e:
    if "module 'builtins' has no attribute 'quit'" in str(e):
        print("EXPECTED FAILURE")
    else:
        print(f"WRONG ERROR: {e}")
except Exception as e:
    print(f"WRONG EXCEPTION: {e}")
"""
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
        f.write(script)
        script_path = f.name
    
    result = subprocess.run(
        [sys.executable, script_path], 
        capture_output=True, 
        text=True
    )
    
    os.unlink(script_path)
    assert "EXPECTED FAILURE" in result.stdout
    assert "UNEXPECTED SUCCESS" not in result.stdout

def test_patched_repl_works():
    """Test that patched Hy REPL works in an IPython-like environment."""
    # Define the patch
    patch_script = """
import sys
import builtins
import types

# Simulate IPython by removing quit/exit
if hasattr(builtins, "quit"):
    delattr(builtins, "quit")
if hasattr(builtins, "exit"):
    delattr(builtins, "exit")

# Create dummy quit function
dummy_quit = types.FunctionType(
    lambda: None.__code__,
    {}, 
    "<dummy-quit>",
    (), 
    None
)

import hy
from hy.repl import REPL

# Store original method
original_run = REPL.run

# Create patched method
def patched_run(self):
    sentinel = []
    saved_values = (
        getattr(sys, "ps1", sentinel),
        getattr(sys, "ps2", sentinel),
        getattr(builtins, "quit", dummy_quit),
        getattr(builtins, "exit", dummy_quit),
        getattr(builtins, "help", sentinel),
    )
    
    # Rest of the method remains unchanged
    try:
        sys.ps1 = self.ps1
        sys.ps2 = self.ps2
        
        # These will be used by the REPL instance
        builtins.quit = self._quit
        builtins.exit = self._quit
        builtins.help = self._help
        
        # Instead of running the REPL, just return success
        # self._repl()
        return 0
    finally:
        prev_ps1, prev_ps2, prev_quit, prev_exit, prev_help = saved_values
        
        if prev_ps1 is sentinel:
            if hasattr(sys, "ps1"):
                del sys.ps1
        else:
            sys.ps1 = prev_ps1
            
        if prev_ps2 is sentinel:
            if hasattr(sys, "ps2"):
                del sys.ps2
        else:
            sys.ps2 = prev_ps2
            
        if prev_quit is dummy_quit:
            if hasattr(builtins, "quit"):
                delattr(builtins, "quit")
        else:
            builtins.quit = prev_quit
            
        if prev_exit is dummy_quit:
            if hasattr(builtins, "exit"):
                delattr(builtins, "exit")
        else:
            builtins.exit = prev_exit
            
        if prev_help is sentinel:
            if hasattr(builtins, "help"):
                delattr(builtins, "help")
        else:
            builtins.help = prev_help

# Apply the patch
REPL.run = patched_run

try:
    # This should now work
    repl = hy.REPL(locals=locals())
    result = repl.run()
    if result == 0:
        print("SUCCESS")
    else:
        print(f"FAILURE: Unexpected return value {result}")
except Exception as e:
    print(f"FAILURE: {e}")

# Restore original method
REPL.run = original_run
"""
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
        f.write(patch_script)
        script_path = f.name
    
    result = subprocess.run(
        [sys.executable, script_path], 
        capture_output=True, 
        text=True
    )
    
    os.unlink(script_path)
    assert "SUCCESS" in result.stdout
    assert "FAILURE" not in result.stdout

if __name__ == "__main__":
    test_python_repl()
    test_ipython_repl_fails()
    test_patched_repl_works()
    print("All tests passed!")
#+end_src

* Mermaid Diagrams

Let's create a Mermaid diagram to explain the issue and solution:

#+begin_src markdown :tangle docs/issue_explanation.md
# Hy IPython REPL Issue Explanation

## Problem Flow

```mermaid
flowchart TB
    A[Standard Python] --> B[builtins.quit exists]
    B --> C[hy.REPL.run() works]
    
    D[IPython] --> E[builtins.quit removed]
    E --> F[hy.REPL.run() fails with AttributeError]
    
    subgraph "Issue #2646"
        E
        F
    end
```

## Solution Flow

```mermaid
flowchart TB
    A[Detect Environment] --> B{builtins.quit exists?}
    B -->|Yes| C[Use existing builtins.quit]
    B -->|No| D[Use dummy quit function]
    C --> E[Save original value]
    D --> E
    E --> F[Set temporary REPL quit function]
    F --> G[Run REPL]
    G --> H[Restore or remove builtins.quit]
    
    subgraph "Patched Solution"
        B
        C
        D
        E
        F
        G
        H
    end
```

## Implementation Details

```mermaid
classDiagram
    class REPL {
        +run()
        -_repl()
        -_quit()
        -_help()
    }
    
    class PatchedREPL {
        +run()
        -_repl()
        -_quit()
        -_help()
        +dummy_quit()
    }
    
    REPL <|-- PatchedREPL
    
    note for PatchedREPL "Uses getattr(builtins, 'quit', dummy_quit)\nto handle missing quit/exit functions"
```
#+end_src

* GitHub Pull Request Template

#+begin_src markdown :tangle .github/pull_request_template.md
## Description

This PR addresses issue #2646: "embedded hy repl only works from python repl, not ipython"

## Problem

When running the Hy REPL from IPython, it fails with:
```
AttributeError: module 'builtins' has no attribute 'quit'
```

This happens because IPython removes the `quit` and `exit` functions from the builtins module.

## Solution

The fix modifies the `REPL.run()` method to handle the case where `builtins.quit` and `builtins.exit` are not available:

1. Use `getattr(builtins, "quit", dummy_quit)` instead of directly accessing `builtins.quit`
2. Provide a dummy function when the attributes are missing
3. Handle the cleanup properly to restore or remove these attributes as needed

## Testing

- Added tests to verify the issue exists in the current implementation
- Added tests to verify the patch fixes the issue
- Manually tested in both Python and IPython environments

## References

- Original issue: #2646
#+end_src

* Make Scripts Executable

#+begin_src sh :tangle scripts/make_executable.sh
#!/bin/bash
# Make all Python scripts executable
chmod +x scripts/*.py
chmod +x tests/*.py
#+end_src

* Virtual Environment Setup

#+begin_src sh :tangle setup_venv.sh
#!/bin/bash
# Create and set up a virtual environment for testing

# Create virtual environment
python -m venv venv

# Activate virtual environment
source venv/bin/activate

# Upgrade pip and install dependencies
pip install --upgrade pip setuptools wheel
pip install -r requirements.txt

# Make scripts executable
bash scripts/make_executable.sh

echo "Virtual environment set up successfully!"
echo "To activate, run: source venv/bin/activate"
#+end_src

* Makefile

#+begin_src makefile :tangle Makefile
.PHONY: setup test clean

setup:
	@echo "Setting up development environment..."
	bash setup_venv.sh

test:
	@echo "Running tests..."
	pytest -xvs tests/

run-python-test:
	@echo "Running Hy REPL in standard Python..."
	python scripts/python_repl_test.py

run-ipython-test:
	@echo "Running Hy REPL in IPython (should fail without fix)..."
	python scripts/ipython_repl_test.py

run-fixed-test:
	@echo "Running patched Hy REPL in IPython..."
	python scripts/fix_patch.py

clean:
	@echo "Cleaning up..."
	rm -rf __pycache__
	rm -rf tests/__pycache__
	rm -rf scripts/__pycache__
	rm -rf .pytest_cache
	rm -rf venv
#+end_src
